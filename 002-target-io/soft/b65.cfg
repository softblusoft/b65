# Copyright 2023 Luca Bertossi
#
# This file is part of B65.
# 
#     B65 is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     B65 is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with B65.  If not, see <http://www.gnu.org/licenses/>.

# this file is a modified version from the guide at https://cc65.github.io/doc/customizing.html

MEMORY
{
    # The Stack Pointer is 256 Bytes deep and is hard-wired to 0x01FF (internally 0x0200 –0x01FF going to
    # the address bus) for the first memory location and grows downward to 0x0100. Decrementing again
    # will produce a wraparound back to 0x01FF

    ZP:       start =    $0, size =  $100, type   = rw, define = yes;
	SP:       start =  $100, size =  $100, type   = rw, define = yes;                  # Processor Stack
    RAM:      start =  $200, size = $D600,              define = yes;
	STACK:    start = $D800, size =  $400;                                             # Application Stack
	REG:      start = $DC00, size =  $400, type   = rw;
    ROM:      start = $E000, size = $2000, file   = %O, fill = yes, fillval = $ff;
}

SEGMENTS
{
    ZEROPAGE: load = ZP,  type = zp,  define   = yes;
    DATA:     load = ROM, type = rw,  define   = yes, run = RAM;
    BSS:      load = RAM, type = bss, define   = yes;
    HEAP:     load = RAM, type = bss, optional = yes;
    STARTUP:  load = ROM, type = ro;
    ONCE:     load = ROM, type = ro,  optional = yes;
    CODE:     load = ROM, type = ro;
    RODATA:   load = ROM, type = ro;
    VECTORS:  load = ROM, type = ro,  start    = $FFFA;
}

FEATURES
{
    CONDES:   segment = STARTUP,
              type    = constructor,
              label   = __CONSTRUCTOR_TABLE__,
              count   = __CONSTRUCTOR_COUNT__;

    CONDES:   segment = STARTUP,
              type    = destructor,
              label   = __DESTRUCTOR_TABLE__,
              count   = __DESTRUCTOR_COUNT__;
}

SYMBOLS
{
    # Define the stack size for the application
    __STACKSIZE__:  type = weak, value = $400;
}
